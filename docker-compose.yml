version: "3.9"

x-logging: &fluent-bit
  driver: fluentd
  options:
    fluentd-address: localhost:24224
    fluentd-async-connect: "true"
    tag: docker

services:
  api-gateway-microservice:
    container_name: api-gateway-microservice
    image: "xmlteam10/api-gateway-microservice"
    pull_policy: always
    networks:
      - backend_net
    ports:
      - "8678:8678"
    restart: on-failure:3 
    logging: *fluent-bit
    depends_on:
     -  fluent-bit
    environment:
      API_GATEWAY_PORT: 8678
      AUTH_HOST: auth-microservice
      AUTH_GRPC_PORT: 8785
      POST_HOST: post-microservice
      POST_GRPC_PORT: 8760
      CONNECTIONS_HOST: connections-microservice
      CONNECTIONS_GRPC_PORT: 8787
      PROFILE_HOST: profile-microservice
      PROFILE_GRPC_PORT: 8888
      MESSAGING_HOST: messaging-microservice
      MESSAGING_GRPC_PORT: 8889
      JOB_RECOMMENDATION_HOST: job-recommendations-microservice
      JOB_RECOMMENDATION_GRPC_PORT: 8899
      JAEGER_DOMAIN: jaeger
  profile-microservice:
    container_name: profile-microservice
    image: "xmlteam10/profile-microservice"
    pull_policy: always
    networks:
      - profile_database_net
      - backend_net
    ports:
      - "8081:8081"
    restart: on-failure:3 
    logging: *fluent-bit
    environment:
      AUTH_HOST: auth-microservice
      AUTH_PORT: 8083
      PROFILE_PORT: 8081
      PROFILE_DB_HOST: profile-postgres
      PROFILE_DB_PORT: 5432
      PROFILE_DB_NAME: ProfileDatabase
      PROFILE_DB_USER: postgres
      PROFILE_DB_PASS: admin
      PROFILE_GRPC_PORT: 8888
      NATS_URI: nats://nats:4222
      JAEGER_DOMAIN: jaeger
    depends_on:
     -  profile-postgres
     -  nats
     -  fluent-bit
  auth-microservice:
    container_name: auth-microservice
    image: "xmlteam10/auth-microservice"
    pull_policy: always
    logging: *fluent-bit
    networks:
      - auth_database_net
      - backend_net
    ports:
      - "8083:8083"
      - "8785:8785" #grpc
    restart: on-failure:3 
    environment:
      CONNECTIONS_HOST: connections-microservice
      CONNECTIONS_PORT: 8082
      PROFILE_HOST: profile-microservice
      PROFILE_PORT: 8081
      AUTH_PORT: 8083
      AUTH_DB_HOST: auth-postgres
      AUTH_DB_PORT: 5432
      AUTH_DB_NAME: AuthDatabase
      AUTH_DB_USER: postgres
      AUTH_DB_PASS: admin
      AUTH_GRPC_PORT: 8785
      NATS_URI: nats://nats:4222
      JAEGER_DOMAIN: jaeger
    depends_on:
     -  auth-postgres
     -  nats
     -  fluent-bit
  post-microservice:
    container_name: post-microservice
    image: "xmlteam10/post-microservice"
    pull_policy: always
    logging: *fluent-bit
    networks:
      - post_database_net
      - backend_net
    ports:
      - "8084:8084"
      - "8760:8760" #grpc
    restart: on-failure:3 
    environment:
      POST_PORT: 8084
      POST_DB_HOST: mongodb
      POST_DB_PORT: 27017
      POST_DB_NAME: PostDatabase
      POST_DB_USER: admin
      POST_DB_PASS: admin
      POST_GRPC_PORT: 8760
      CONNECTIONS_HOST: connections-microservice
      CONNECTIONS_GRPC_PORT: 8787
      spring_data_mongodb_username: admin
      spring_data_mongodb_password: admin
      JAEGER_DOMAIN: jaeger
    depends_on:
     - mongodb
     - fluent-bit

  connections-microservice:
    container_name: connections-microservice
    image: "xmlteam10/connections-microservice"
    pull_policy: always
    logging: *fluent-bit
    networks:
      - connections_database_net
      - backend_net
    ports:
      - "8082:8082"
      - "8787:8787" #grpc
    restart: on-failure:3 
    environment:
      CONNECTIONS_PORT: 8082
      CONNECTIONS_DB_HOST: connections-neo4j
      CONNECTIONS_DB_PORT: 7687
      CONNECTIONS_DB_USER: neo4j
      CONNECTIONS_DB_PASS: admin
      CONNECTIONS_GRPC_PORT: 8787
      NATS_URI: nats://nats:4222
      JAEGER_DOMAIN: jaeger
    depends_on:
     - connections-neo4j
     - nats
     -  fluent-bit

  agent:
    container_name: agent
    image: "xmlteam10/agent"
    pull_policy: always
    networks:
      - agent_database_net
      - backend_net
    ports:
      - "8080:8080"
    restart: on-failure:3 
    environment:
      AGENT_PORT: 8080
      AGENT_DB_NAME: AgentDatabase
      AGENT_DB_HOST: agent-postgres
      AGENT_DB_PORT: 5432
      AGENT_DB_USER: postgres
      AGENT_DB_PASS: admin
      API_GATEWAY_HOST: api-gateway-microservice
      API_GATEWAY_PORT: 8678
    depends_on:
     - agent-postgres
  
  messaging-microservice:
    container_name: messaging-microservice
    image: "xmlteam10/messaging-microservice"
    pull_policy: always
    logging: *fluent-bit
    networks:
      - messaging_database_net
      - backend_net
    ports:
      - "8085:8085"
      - "8889:8889" #grpc
    restart: on-failure:3 
    environment:
      MESSAGE_PORT: 8085
      MESSAGE_DB_HOST: mongodb-message
      MESSAGE_DB_PORT: 27017
      MESSAGE_DB_NAME: MessageDatabase
      MESSAGE_DB_USER: admin
      MESSAGE_DB_PASS: admin
      MESSAGE_GRPC_PORT: 8889
      spring_data_mongodb_username: admin
      spring_data_mongodb_password: admin
      JAEGER_DOMAIN: jaeger
    depends_on:
     - mongodb-message
     - fluent-bit

  job-recommendations-microservice:
    container_name: job-recommendations-microservice
    image: "xmlteam10/job-recommendations-microservice"
    pull_policy: always
    logging: *fluent-bit
    networks:
      - job_recommendations_database_net
      - backend_net
    ports:
      - "8086:8086"
      - "8899:8899" #grpc
    restart: on-failure:3 
    environment:
      JOB_RECOMMENDATION_PORT: 8086
      JOB_RECOMMENDATION_DB_HOST: job-recommendations-neo4j
      JOB_RECOMMENDATION_DB_PORT: 7687
      JOB_RECOMMENDATION_DB_USER: neo4j
      JOB_RECOMMENDATION_DB_PASS: admin
      JOB_RECOMMENDATION_GRPC_PORT: 8899
      JAEGER_DOMAIN: jaeger
    depends_on:
     - job-recommendations-neo4j
     - fluent-bit

  nats:
    image: 'nats:2.8.4'
    # entrypoint: "/gnatsd -DV"
    expose:
      - "4222"
    ports:
      - "8222:8222"
    hostname: nats-server
    networks:
      - backend_net

  profile-postgres:
    container_name: profile-postgres
    image: postgres:14.1-alpine
    networks:
      - profile_database_net
    restart: always
    environment:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: admin
        POSTGRES_DB: ProfileDatabase
    ports:
      - '5433:5432'
    
  auth-postgres:
    container_name: auth-postgres
    image: postgres:14.1-alpine
    networks:
      - auth_database_net
    restart: always
    environment:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: admin
        POSTGRES_DB: AuthDatabase
    ports:
      - '5434:5432'
  
  agent-postgres:
    container_name: agent-postgres
    image: postgres:14.1-alpine
    networks:
      - agent_database_net
    restart: always
    environment:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: admin
        POSTGRES_DB: AgentDatabase
    ports:
      - '5435:5432'
    
  connections-neo4j:
    container_name: connections-neo4j
    image: neo4j:latest
    networks:
      - connections_database_net
    ports: 
      - "7687:7687"
    environment: 
      -  NEO4J_AUTH=none

  mongodb:
    container_name: mongodb
    image: mongo
    restart: always
    networks:
      - post_database_net
    ports:
        - 27018:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
      MONGO_INITDB_DATABASE: PostDatabase
      MONGO_DB_USERNAME: admin
      MONGO_DB_PASSWORD: admin
  mongodb-message:
    container_name: mongodb-message
    image: mongo
    restart: always
    networks:
      - messaging_database_net
    ports:
        - 27019:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
      MONGO_INITDB_DATABASE: MessageDatabase
      MONGO_DB_USERNAME: admin
      MONGO_DB_PASSWORD: admin
  job-recommendations-neo4j:
    container_name: job-recommendations-neo4j
    image: neo4j:latest
    networks:
      - job_recommendations_database_net
    ports: 
      - "7688:7687"
    environment: 
      -  NEO4J_AUTH=none

  
  loki:
    image: grafana/loki:main-5206e3a
    networks:
      - backend_net

  grafana:
    image: grafana/grafana:8.5.3
    ports:
      - "3000:3000"
    environment:
      GF_RENDERING_SERVER_URL: http://renderer:8081/render
      GF_RENDERING_CALLBACK_URL: http://grafana:3000/
      GF_LOG_FILTERS: rendering:debug
    volumes:
      - grafana:/var/lib/grafana
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - backend_net

  renderer:
    image: grafana/grafana-image-renderer:3.4.2
    environment:
      ENABLE_METRICS: "true"
    networks:
      - backend_net

  fluent-bit:
    image: grafana/fluent-bit-plugin-loki:main-5206e3a-amd64
    environment:
      - LOKI_URL=http://loki:3100/loki/api/v1/push
    volumes:
      - ./fluent-bit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - backend_net
      

  jaeger:
    image: jaegertracing/all-in-one:1.34
    ports:
      - "9000:16686"
    networks:
      - backend_net

  prometheus:
    image: prom/prometheus:v2.35.0
    restart: on-failure
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus:/var/lib/prometheus
    networks:
      - backend_net

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    ports:
      - "8890:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - backend_net

  node-exporter:
    image: prom/node-exporter:v1.1.2
    ports:
      - "9100:9100"
    networks:
      - backend_net
  

networks:
  post_database_net:
    name: post_database_net
    driver: bridge
  connections_database_net:
    name: connections_database_net
    driver: bridge
  auth_database_net:
    name: auth_database_net
    driver: bridge
  profile_database_net:
    name: profile_database_net
    driver: bridge
  agent_database_net:
    name: agent_database_net
    driver: bridge
  backend_net:
    name: backend_net
    driver: bridge
  messaging_database_net:
    name: messaging_database_net
    driver: bridge
  job_recommendations_database_net:
    name: job_recommendations_database_net
    driver: bridge

volumes:
  grafana:
    name: grafana
  prometheus:
    name: prometheus